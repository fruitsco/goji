// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package cloudtaskspb_mocks

import (
	"context"

	"cloud.google.com/go/cloudtasks/apiv2/cloudtaskspb"
	"cloud.google.com/go/iam/apiv1/iampb"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/protobuf/types/known/emptypb"
)

// NewMockCloudTasksServer creates a new instance of MockCloudTasksServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCloudTasksServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCloudTasksServer {
	mock := &MockCloudTasksServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCloudTasksServer is an autogenerated mock type for the CloudTasksServer type
type MockCloudTasksServer struct {
	mock.Mock
}

type MockCloudTasksServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCloudTasksServer) EXPECT() *MockCloudTasksServer_Expecter {
	return &MockCloudTasksServer_Expecter{mock: &_m.Mock}
}

// CreateQueue provides a mock function for the type MockCloudTasksServer
func (_mock *MockCloudTasksServer) CreateQueue(context1 context.Context, createQueueRequest *cloudtaskspb.CreateQueueRequest) (*cloudtaskspb.Queue, error) {
	ret := _mock.Called(context1, createQueueRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateQueue")
	}

	var r0 *cloudtaskspb.Queue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.CreateQueueRequest) (*cloudtaskspb.Queue, error)); ok {
		return returnFunc(context1, createQueueRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.CreateQueueRequest) *cloudtaskspb.Queue); ok {
		r0 = returnFunc(context1, createQueueRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudtaskspb.Queue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cloudtaskspb.CreateQueueRequest) error); ok {
		r1 = returnFunc(context1, createQueueRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudTasksServer_CreateQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQueue'
type MockCloudTasksServer_CreateQueue_Call struct {
	*mock.Call
}

// CreateQueue is a helper method to define mock.On call
//   - context1 context.Context
//   - createQueueRequest *cloudtaskspb.CreateQueueRequest
func (_e *MockCloudTasksServer_Expecter) CreateQueue(context1 interface{}, createQueueRequest interface{}) *MockCloudTasksServer_CreateQueue_Call {
	return &MockCloudTasksServer_CreateQueue_Call{Call: _e.mock.On("CreateQueue", context1, createQueueRequest)}
}

func (_c *MockCloudTasksServer_CreateQueue_Call) Run(run func(context1 context.Context, createQueueRequest *cloudtaskspb.CreateQueueRequest)) *MockCloudTasksServer_CreateQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *cloudtaskspb.CreateQueueRequest
		if args[1] != nil {
			arg1 = args[1].(*cloudtaskspb.CreateQueueRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCloudTasksServer_CreateQueue_Call) Return(queue *cloudtaskspb.Queue, err error) *MockCloudTasksServer_CreateQueue_Call {
	_c.Call.Return(queue, err)
	return _c
}

func (_c *MockCloudTasksServer_CreateQueue_Call) RunAndReturn(run func(context1 context.Context, createQueueRequest *cloudtaskspb.CreateQueueRequest) (*cloudtaskspb.Queue, error)) *MockCloudTasksServer_CreateQueue_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTask provides a mock function for the type MockCloudTasksServer
func (_mock *MockCloudTasksServer) CreateTask(context1 context.Context, createTaskRequest *cloudtaskspb.CreateTaskRequest) (*cloudtaskspb.Task, error) {
	ret := _mock.Called(context1, createTaskRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *cloudtaskspb.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.CreateTaskRequest) (*cloudtaskspb.Task, error)); ok {
		return returnFunc(context1, createTaskRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.CreateTaskRequest) *cloudtaskspb.Task); ok {
		r0 = returnFunc(context1, createTaskRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudtaskspb.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cloudtaskspb.CreateTaskRequest) error); ok {
		r1 = returnFunc(context1, createTaskRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudTasksServer_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type MockCloudTasksServer_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - context1 context.Context
//   - createTaskRequest *cloudtaskspb.CreateTaskRequest
func (_e *MockCloudTasksServer_Expecter) CreateTask(context1 interface{}, createTaskRequest interface{}) *MockCloudTasksServer_CreateTask_Call {
	return &MockCloudTasksServer_CreateTask_Call{Call: _e.mock.On("CreateTask", context1, createTaskRequest)}
}

func (_c *MockCloudTasksServer_CreateTask_Call) Run(run func(context1 context.Context, createTaskRequest *cloudtaskspb.CreateTaskRequest)) *MockCloudTasksServer_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *cloudtaskspb.CreateTaskRequest
		if args[1] != nil {
			arg1 = args[1].(*cloudtaskspb.CreateTaskRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCloudTasksServer_CreateTask_Call) Return(task *cloudtaskspb.Task, err error) *MockCloudTasksServer_CreateTask_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *MockCloudTasksServer_CreateTask_Call) RunAndReturn(run func(context1 context.Context, createTaskRequest *cloudtaskspb.CreateTaskRequest) (*cloudtaskspb.Task, error)) *MockCloudTasksServer_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteQueue provides a mock function for the type MockCloudTasksServer
func (_mock *MockCloudTasksServer) DeleteQueue(context1 context.Context, deleteQueueRequest *cloudtaskspb.DeleteQueueRequest) (*emptypb.Empty, error) {
	ret := _mock.Called(context1, deleteQueueRequest)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQueue")
	}

	var r0 *emptypb.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.DeleteQueueRequest) (*emptypb.Empty, error)); ok {
		return returnFunc(context1, deleteQueueRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.DeleteQueueRequest) *emptypb.Empty); ok {
		r0 = returnFunc(context1, deleteQueueRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cloudtaskspb.DeleteQueueRequest) error); ok {
		r1 = returnFunc(context1, deleteQueueRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudTasksServer_DeleteQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteQueue'
type MockCloudTasksServer_DeleteQueue_Call struct {
	*mock.Call
}

// DeleteQueue is a helper method to define mock.On call
//   - context1 context.Context
//   - deleteQueueRequest *cloudtaskspb.DeleteQueueRequest
func (_e *MockCloudTasksServer_Expecter) DeleteQueue(context1 interface{}, deleteQueueRequest interface{}) *MockCloudTasksServer_DeleteQueue_Call {
	return &MockCloudTasksServer_DeleteQueue_Call{Call: _e.mock.On("DeleteQueue", context1, deleteQueueRequest)}
}

func (_c *MockCloudTasksServer_DeleteQueue_Call) Run(run func(context1 context.Context, deleteQueueRequest *cloudtaskspb.DeleteQueueRequest)) *MockCloudTasksServer_DeleteQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *cloudtaskspb.DeleteQueueRequest
		if args[1] != nil {
			arg1 = args[1].(*cloudtaskspb.DeleteQueueRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCloudTasksServer_DeleteQueue_Call) Return(empty *emptypb.Empty, err error) *MockCloudTasksServer_DeleteQueue_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockCloudTasksServer_DeleteQueue_Call) RunAndReturn(run func(context1 context.Context, deleteQueueRequest *cloudtaskspb.DeleteQueueRequest) (*emptypb.Empty, error)) *MockCloudTasksServer_DeleteQueue_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTask provides a mock function for the type MockCloudTasksServer
func (_mock *MockCloudTasksServer) DeleteTask(context1 context.Context, deleteTaskRequest *cloudtaskspb.DeleteTaskRequest) (*emptypb.Empty, error) {
	ret := _mock.Called(context1, deleteTaskRequest)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 *emptypb.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.DeleteTaskRequest) (*emptypb.Empty, error)); ok {
		return returnFunc(context1, deleteTaskRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.DeleteTaskRequest) *emptypb.Empty); ok {
		r0 = returnFunc(context1, deleteTaskRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cloudtaskspb.DeleteTaskRequest) error); ok {
		r1 = returnFunc(context1, deleteTaskRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudTasksServer_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type MockCloudTasksServer_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - context1 context.Context
//   - deleteTaskRequest *cloudtaskspb.DeleteTaskRequest
func (_e *MockCloudTasksServer_Expecter) DeleteTask(context1 interface{}, deleteTaskRequest interface{}) *MockCloudTasksServer_DeleteTask_Call {
	return &MockCloudTasksServer_DeleteTask_Call{Call: _e.mock.On("DeleteTask", context1, deleteTaskRequest)}
}

func (_c *MockCloudTasksServer_DeleteTask_Call) Run(run func(context1 context.Context, deleteTaskRequest *cloudtaskspb.DeleteTaskRequest)) *MockCloudTasksServer_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *cloudtaskspb.DeleteTaskRequest
		if args[1] != nil {
			arg1 = args[1].(*cloudtaskspb.DeleteTaskRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCloudTasksServer_DeleteTask_Call) Return(empty *emptypb.Empty, err error) *MockCloudTasksServer_DeleteTask_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockCloudTasksServer_DeleteTask_Call) RunAndReturn(run func(context1 context.Context, deleteTaskRequest *cloudtaskspb.DeleteTaskRequest) (*emptypb.Empty, error)) *MockCloudTasksServer_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetIamPolicy provides a mock function for the type MockCloudTasksServer
func (_mock *MockCloudTasksServer) GetIamPolicy(context1 context.Context, getIamPolicyRequest *iampb.GetIamPolicyRequest) (*iampb.Policy, error) {
	ret := _mock.Called(context1, getIamPolicyRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetIamPolicy")
	}

	var r0 *iampb.Policy
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *iampb.GetIamPolicyRequest) (*iampb.Policy, error)); ok {
		return returnFunc(context1, getIamPolicyRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *iampb.GetIamPolicyRequest) *iampb.Policy); ok {
		r0 = returnFunc(context1, getIamPolicyRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iampb.Policy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *iampb.GetIamPolicyRequest) error); ok {
		r1 = returnFunc(context1, getIamPolicyRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudTasksServer_GetIamPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIamPolicy'
type MockCloudTasksServer_GetIamPolicy_Call struct {
	*mock.Call
}

// GetIamPolicy is a helper method to define mock.On call
//   - context1 context.Context
//   - getIamPolicyRequest *iampb.GetIamPolicyRequest
func (_e *MockCloudTasksServer_Expecter) GetIamPolicy(context1 interface{}, getIamPolicyRequest interface{}) *MockCloudTasksServer_GetIamPolicy_Call {
	return &MockCloudTasksServer_GetIamPolicy_Call{Call: _e.mock.On("GetIamPolicy", context1, getIamPolicyRequest)}
}

func (_c *MockCloudTasksServer_GetIamPolicy_Call) Run(run func(context1 context.Context, getIamPolicyRequest *iampb.GetIamPolicyRequest)) *MockCloudTasksServer_GetIamPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *iampb.GetIamPolicyRequest
		if args[1] != nil {
			arg1 = args[1].(*iampb.GetIamPolicyRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCloudTasksServer_GetIamPolicy_Call) Return(policy *iampb.Policy, err error) *MockCloudTasksServer_GetIamPolicy_Call {
	_c.Call.Return(policy, err)
	return _c
}

func (_c *MockCloudTasksServer_GetIamPolicy_Call) RunAndReturn(run func(context1 context.Context, getIamPolicyRequest *iampb.GetIamPolicyRequest) (*iampb.Policy, error)) *MockCloudTasksServer_GetIamPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueue provides a mock function for the type MockCloudTasksServer
func (_mock *MockCloudTasksServer) GetQueue(context1 context.Context, getQueueRequest *cloudtaskspb.GetQueueRequest) (*cloudtaskspb.Queue, error) {
	ret := _mock.Called(context1, getQueueRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetQueue")
	}

	var r0 *cloudtaskspb.Queue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.GetQueueRequest) (*cloudtaskspb.Queue, error)); ok {
		return returnFunc(context1, getQueueRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.GetQueueRequest) *cloudtaskspb.Queue); ok {
		r0 = returnFunc(context1, getQueueRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudtaskspb.Queue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cloudtaskspb.GetQueueRequest) error); ok {
		r1 = returnFunc(context1, getQueueRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudTasksServer_GetQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueue'
type MockCloudTasksServer_GetQueue_Call struct {
	*mock.Call
}

// GetQueue is a helper method to define mock.On call
//   - context1 context.Context
//   - getQueueRequest *cloudtaskspb.GetQueueRequest
func (_e *MockCloudTasksServer_Expecter) GetQueue(context1 interface{}, getQueueRequest interface{}) *MockCloudTasksServer_GetQueue_Call {
	return &MockCloudTasksServer_GetQueue_Call{Call: _e.mock.On("GetQueue", context1, getQueueRequest)}
}

func (_c *MockCloudTasksServer_GetQueue_Call) Run(run func(context1 context.Context, getQueueRequest *cloudtaskspb.GetQueueRequest)) *MockCloudTasksServer_GetQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *cloudtaskspb.GetQueueRequest
		if args[1] != nil {
			arg1 = args[1].(*cloudtaskspb.GetQueueRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCloudTasksServer_GetQueue_Call) Return(queue *cloudtaskspb.Queue, err error) *MockCloudTasksServer_GetQueue_Call {
	_c.Call.Return(queue, err)
	return _c
}

func (_c *MockCloudTasksServer_GetQueue_Call) RunAndReturn(run func(context1 context.Context, getQueueRequest *cloudtaskspb.GetQueueRequest) (*cloudtaskspb.Queue, error)) *MockCloudTasksServer_GetQueue_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function for the type MockCloudTasksServer
func (_mock *MockCloudTasksServer) GetTask(context1 context.Context, getTaskRequest *cloudtaskspb.GetTaskRequest) (*cloudtaskspb.Task, error) {
	ret := _mock.Called(context1, getTaskRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 *cloudtaskspb.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.GetTaskRequest) (*cloudtaskspb.Task, error)); ok {
		return returnFunc(context1, getTaskRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.GetTaskRequest) *cloudtaskspb.Task); ok {
		r0 = returnFunc(context1, getTaskRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudtaskspb.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cloudtaskspb.GetTaskRequest) error); ok {
		r1 = returnFunc(context1, getTaskRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudTasksServer_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type MockCloudTasksServer_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - context1 context.Context
//   - getTaskRequest *cloudtaskspb.GetTaskRequest
func (_e *MockCloudTasksServer_Expecter) GetTask(context1 interface{}, getTaskRequest interface{}) *MockCloudTasksServer_GetTask_Call {
	return &MockCloudTasksServer_GetTask_Call{Call: _e.mock.On("GetTask", context1, getTaskRequest)}
}

func (_c *MockCloudTasksServer_GetTask_Call) Run(run func(context1 context.Context, getTaskRequest *cloudtaskspb.GetTaskRequest)) *MockCloudTasksServer_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *cloudtaskspb.GetTaskRequest
		if args[1] != nil {
			arg1 = args[1].(*cloudtaskspb.GetTaskRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCloudTasksServer_GetTask_Call) Return(task *cloudtaskspb.Task, err error) *MockCloudTasksServer_GetTask_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *MockCloudTasksServer_GetTask_Call) RunAndReturn(run func(context1 context.Context, getTaskRequest *cloudtaskspb.GetTaskRequest) (*cloudtaskspb.Task, error)) *MockCloudTasksServer_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// ListQueues provides a mock function for the type MockCloudTasksServer
func (_mock *MockCloudTasksServer) ListQueues(context1 context.Context, listQueuesRequest *cloudtaskspb.ListQueuesRequest) (*cloudtaskspb.ListQueuesResponse, error) {
	ret := _mock.Called(context1, listQueuesRequest)

	if len(ret) == 0 {
		panic("no return value specified for ListQueues")
	}

	var r0 *cloudtaskspb.ListQueuesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.ListQueuesRequest) (*cloudtaskspb.ListQueuesResponse, error)); ok {
		return returnFunc(context1, listQueuesRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.ListQueuesRequest) *cloudtaskspb.ListQueuesResponse); ok {
		r0 = returnFunc(context1, listQueuesRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudtaskspb.ListQueuesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cloudtaskspb.ListQueuesRequest) error); ok {
		r1 = returnFunc(context1, listQueuesRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudTasksServer_ListQueues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListQueues'
type MockCloudTasksServer_ListQueues_Call struct {
	*mock.Call
}

// ListQueues is a helper method to define mock.On call
//   - context1 context.Context
//   - listQueuesRequest *cloudtaskspb.ListQueuesRequest
func (_e *MockCloudTasksServer_Expecter) ListQueues(context1 interface{}, listQueuesRequest interface{}) *MockCloudTasksServer_ListQueues_Call {
	return &MockCloudTasksServer_ListQueues_Call{Call: _e.mock.On("ListQueues", context1, listQueuesRequest)}
}

func (_c *MockCloudTasksServer_ListQueues_Call) Run(run func(context1 context.Context, listQueuesRequest *cloudtaskspb.ListQueuesRequest)) *MockCloudTasksServer_ListQueues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *cloudtaskspb.ListQueuesRequest
		if args[1] != nil {
			arg1 = args[1].(*cloudtaskspb.ListQueuesRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCloudTasksServer_ListQueues_Call) Return(listQueuesResponse *cloudtaskspb.ListQueuesResponse, err error) *MockCloudTasksServer_ListQueues_Call {
	_c.Call.Return(listQueuesResponse, err)
	return _c
}

func (_c *MockCloudTasksServer_ListQueues_Call) RunAndReturn(run func(context1 context.Context, listQueuesRequest *cloudtaskspb.ListQueuesRequest) (*cloudtaskspb.ListQueuesResponse, error)) *MockCloudTasksServer_ListQueues_Call {
	_c.Call.Return(run)
	return _c
}

// ListTasks provides a mock function for the type MockCloudTasksServer
func (_mock *MockCloudTasksServer) ListTasks(context1 context.Context, listTasksRequest *cloudtaskspb.ListTasksRequest) (*cloudtaskspb.ListTasksResponse, error) {
	ret := _mock.Called(context1, listTasksRequest)

	if len(ret) == 0 {
		panic("no return value specified for ListTasks")
	}

	var r0 *cloudtaskspb.ListTasksResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.ListTasksRequest) (*cloudtaskspb.ListTasksResponse, error)); ok {
		return returnFunc(context1, listTasksRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.ListTasksRequest) *cloudtaskspb.ListTasksResponse); ok {
		r0 = returnFunc(context1, listTasksRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudtaskspb.ListTasksResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cloudtaskspb.ListTasksRequest) error); ok {
		r1 = returnFunc(context1, listTasksRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudTasksServer_ListTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTasks'
type MockCloudTasksServer_ListTasks_Call struct {
	*mock.Call
}

// ListTasks is a helper method to define mock.On call
//   - context1 context.Context
//   - listTasksRequest *cloudtaskspb.ListTasksRequest
func (_e *MockCloudTasksServer_Expecter) ListTasks(context1 interface{}, listTasksRequest interface{}) *MockCloudTasksServer_ListTasks_Call {
	return &MockCloudTasksServer_ListTasks_Call{Call: _e.mock.On("ListTasks", context1, listTasksRequest)}
}

func (_c *MockCloudTasksServer_ListTasks_Call) Run(run func(context1 context.Context, listTasksRequest *cloudtaskspb.ListTasksRequest)) *MockCloudTasksServer_ListTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *cloudtaskspb.ListTasksRequest
		if args[1] != nil {
			arg1 = args[1].(*cloudtaskspb.ListTasksRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCloudTasksServer_ListTasks_Call) Return(listTasksResponse *cloudtaskspb.ListTasksResponse, err error) *MockCloudTasksServer_ListTasks_Call {
	_c.Call.Return(listTasksResponse, err)
	return _c
}

func (_c *MockCloudTasksServer_ListTasks_Call) RunAndReturn(run func(context1 context.Context, listTasksRequest *cloudtaskspb.ListTasksRequest) (*cloudtaskspb.ListTasksResponse, error)) *MockCloudTasksServer_ListTasks_Call {
	_c.Call.Return(run)
	return _c
}

// PauseQueue provides a mock function for the type MockCloudTasksServer
func (_mock *MockCloudTasksServer) PauseQueue(context1 context.Context, pauseQueueRequest *cloudtaskspb.PauseQueueRequest) (*cloudtaskspb.Queue, error) {
	ret := _mock.Called(context1, pauseQueueRequest)

	if len(ret) == 0 {
		panic("no return value specified for PauseQueue")
	}

	var r0 *cloudtaskspb.Queue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.PauseQueueRequest) (*cloudtaskspb.Queue, error)); ok {
		return returnFunc(context1, pauseQueueRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.PauseQueueRequest) *cloudtaskspb.Queue); ok {
		r0 = returnFunc(context1, pauseQueueRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudtaskspb.Queue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cloudtaskspb.PauseQueueRequest) error); ok {
		r1 = returnFunc(context1, pauseQueueRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudTasksServer_PauseQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PauseQueue'
type MockCloudTasksServer_PauseQueue_Call struct {
	*mock.Call
}

// PauseQueue is a helper method to define mock.On call
//   - context1 context.Context
//   - pauseQueueRequest *cloudtaskspb.PauseQueueRequest
func (_e *MockCloudTasksServer_Expecter) PauseQueue(context1 interface{}, pauseQueueRequest interface{}) *MockCloudTasksServer_PauseQueue_Call {
	return &MockCloudTasksServer_PauseQueue_Call{Call: _e.mock.On("PauseQueue", context1, pauseQueueRequest)}
}

func (_c *MockCloudTasksServer_PauseQueue_Call) Run(run func(context1 context.Context, pauseQueueRequest *cloudtaskspb.PauseQueueRequest)) *MockCloudTasksServer_PauseQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *cloudtaskspb.PauseQueueRequest
		if args[1] != nil {
			arg1 = args[1].(*cloudtaskspb.PauseQueueRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCloudTasksServer_PauseQueue_Call) Return(queue *cloudtaskspb.Queue, err error) *MockCloudTasksServer_PauseQueue_Call {
	_c.Call.Return(queue, err)
	return _c
}

func (_c *MockCloudTasksServer_PauseQueue_Call) RunAndReturn(run func(context1 context.Context, pauseQueueRequest *cloudtaskspb.PauseQueueRequest) (*cloudtaskspb.Queue, error)) *MockCloudTasksServer_PauseQueue_Call {
	_c.Call.Return(run)
	return _c
}

// PurgeQueue provides a mock function for the type MockCloudTasksServer
func (_mock *MockCloudTasksServer) PurgeQueue(context1 context.Context, purgeQueueRequest *cloudtaskspb.PurgeQueueRequest) (*cloudtaskspb.Queue, error) {
	ret := _mock.Called(context1, purgeQueueRequest)

	if len(ret) == 0 {
		panic("no return value specified for PurgeQueue")
	}

	var r0 *cloudtaskspb.Queue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.PurgeQueueRequest) (*cloudtaskspb.Queue, error)); ok {
		return returnFunc(context1, purgeQueueRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.PurgeQueueRequest) *cloudtaskspb.Queue); ok {
		r0 = returnFunc(context1, purgeQueueRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudtaskspb.Queue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cloudtaskspb.PurgeQueueRequest) error); ok {
		r1 = returnFunc(context1, purgeQueueRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudTasksServer_PurgeQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PurgeQueue'
type MockCloudTasksServer_PurgeQueue_Call struct {
	*mock.Call
}

// PurgeQueue is a helper method to define mock.On call
//   - context1 context.Context
//   - purgeQueueRequest *cloudtaskspb.PurgeQueueRequest
func (_e *MockCloudTasksServer_Expecter) PurgeQueue(context1 interface{}, purgeQueueRequest interface{}) *MockCloudTasksServer_PurgeQueue_Call {
	return &MockCloudTasksServer_PurgeQueue_Call{Call: _e.mock.On("PurgeQueue", context1, purgeQueueRequest)}
}

func (_c *MockCloudTasksServer_PurgeQueue_Call) Run(run func(context1 context.Context, purgeQueueRequest *cloudtaskspb.PurgeQueueRequest)) *MockCloudTasksServer_PurgeQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *cloudtaskspb.PurgeQueueRequest
		if args[1] != nil {
			arg1 = args[1].(*cloudtaskspb.PurgeQueueRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCloudTasksServer_PurgeQueue_Call) Return(queue *cloudtaskspb.Queue, err error) *MockCloudTasksServer_PurgeQueue_Call {
	_c.Call.Return(queue, err)
	return _c
}

func (_c *MockCloudTasksServer_PurgeQueue_Call) RunAndReturn(run func(context1 context.Context, purgeQueueRequest *cloudtaskspb.PurgeQueueRequest) (*cloudtaskspb.Queue, error)) *MockCloudTasksServer_PurgeQueue_Call {
	_c.Call.Return(run)
	return _c
}

// ResumeQueue provides a mock function for the type MockCloudTasksServer
func (_mock *MockCloudTasksServer) ResumeQueue(context1 context.Context, resumeQueueRequest *cloudtaskspb.ResumeQueueRequest) (*cloudtaskspb.Queue, error) {
	ret := _mock.Called(context1, resumeQueueRequest)

	if len(ret) == 0 {
		panic("no return value specified for ResumeQueue")
	}

	var r0 *cloudtaskspb.Queue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.ResumeQueueRequest) (*cloudtaskspb.Queue, error)); ok {
		return returnFunc(context1, resumeQueueRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.ResumeQueueRequest) *cloudtaskspb.Queue); ok {
		r0 = returnFunc(context1, resumeQueueRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudtaskspb.Queue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cloudtaskspb.ResumeQueueRequest) error); ok {
		r1 = returnFunc(context1, resumeQueueRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudTasksServer_ResumeQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResumeQueue'
type MockCloudTasksServer_ResumeQueue_Call struct {
	*mock.Call
}

// ResumeQueue is a helper method to define mock.On call
//   - context1 context.Context
//   - resumeQueueRequest *cloudtaskspb.ResumeQueueRequest
func (_e *MockCloudTasksServer_Expecter) ResumeQueue(context1 interface{}, resumeQueueRequest interface{}) *MockCloudTasksServer_ResumeQueue_Call {
	return &MockCloudTasksServer_ResumeQueue_Call{Call: _e.mock.On("ResumeQueue", context1, resumeQueueRequest)}
}

func (_c *MockCloudTasksServer_ResumeQueue_Call) Run(run func(context1 context.Context, resumeQueueRequest *cloudtaskspb.ResumeQueueRequest)) *MockCloudTasksServer_ResumeQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *cloudtaskspb.ResumeQueueRequest
		if args[1] != nil {
			arg1 = args[1].(*cloudtaskspb.ResumeQueueRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCloudTasksServer_ResumeQueue_Call) Return(queue *cloudtaskspb.Queue, err error) *MockCloudTasksServer_ResumeQueue_Call {
	_c.Call.Return(queue, err)
	return _c
}

func (_c *MockCloudTasksServer_ResumeQueue_Call) RunAndReturn(run func(context1 context.Context, resumeQueueRequest *cloudtaskspb.ResumeQueueRequest) (*cloudtaskspb.Queue, error)) *MockCloudTasksServer_ResumeQueue_Call {
	_c.Call.Return(run)
	return _c
}

// RunTask provides a mock function for the type MockCloudTasksServer
func (_mock *MockCloudTasksServer) RunTask(context1 context.Context, runTaskRequest *cloudtaskspb.RunTaskRequest) (*cloudtaskspb.Task, error) {
	ret := _mock.Called(context1, runTaskRequest)

	if len(ret) == 0 {
		panic("no return value specified for RunTask")
	}

	var r0 *cloudtaskspb.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.RunTaskRequest) (*cloudtaskspb.Task, error)); ok {
		return returnFunc(context1, runTaskRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.RunTaskRequest) *cloudtaskspb.Task); ok {
		r0 = returnFunc(context1, runTaskRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudtaskspb.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cloudtaskspb.RunTaskRequest) error); ok {
		r1 = returnFunc(context1, runTaskRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudTasksServer_RunTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunTask'
type MockCloudTasksServer_RunTask_Call struct {
	*mock.Call
}

// RunTask is a helper method to define mock.On call
//   - context1 context.Context
//   - runTaskRequest *cloudtaskspb.RunTaskRequest
func (_e *MockCloudTasksServer_Expecter) RunTask(context1 interface{}, runTaskRequest interface{}) *MockCloudTasksServer_RunTask_Call {
	return &MockCloudTasksServer_RunTask_Call{Call: _e.mock.On("RunTask", context1, runTaskRequest)}
}

func (_c *MockCloudTasksServer_RunTask_Call) Run(run func(context1 context.Context, runTaskRequest *cloudtaskspb.RunTaskRequest)) *MockCloudTasksServer_RunTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *cloudtaskspb.RunTaskRequest
		if args[1] != nil {
			arg1 = args[1].(*cloudtaskspb.RunTaskRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCloudTasksServer_RunTask_Call) Return(task *cloudtaskspb.Task, err error) *MockCloudTasksServer_RunTask_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *MockCloudTasksServer_RunTask_Call) RunAndReturn(run func(context1 context.Context, runTaskRequest *cloudtaskspb.RunTaskRequest) (*cloudtaskspb.Task, error)) *MockCloudTasksServer_RunTask_Call {
	_c.Call.Return(run)
	return _c
}

// SetIamPolicy provides a mock function for the type MockCloudTasksServer
func (_mock *MockCloudTasksServer) SetIamPolicy(context1 context.Context, setIamPolicyRequest *iampb.SetIamPolicyRequest) (*iampb.Policy, error) {
	ret := _mock.Called(context1, setIamPolicyRequest)

	if len(ret) == 0 {
		panic("no return value specified for SetIamPolicy")
	}

	var r0 *iampb.Policy
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *iampb.SetIamPolicyRequest) (*iampb.Policy, error)); ok {
		return returnFunc(context1, setIamPolicyRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *iampb.SetIamPolicyRequest) *iampb.Policy); ok {
		r0 = returnFunc(context1, setIamPolicyRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iampb.Policy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *iampb.SetIamPolicyRequest) error); ok {
		r1 = returnFunc(context1, setIamPolicyRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudTasksServer_SetIamPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetIamPolicy'
type MockCloudTasksServer_SetIamPolicy_Call struct {
	*mock.Call
}

// SetIamPolicy is a helper method to define mock.On call
//   - context1 context.Context
//   - setIamPolicyRequest *iampb.SetIamPolicyRequest
func (_e *MockCloudTasksServer_Expecter) SetIamPolicy(context1 interface{}, setIamPolicyRequest interface{}) *MockCloudTasksServer_SetIamPolicy_Call {
	return &MockCloudTasksServer_SetIamPolicy_Call{Call: _e.mock.On("SetIamPolicy", context1, setIamPolicyRequest)}
}

func (_c *MockCloudTasksServer_SetIamPolicy_Call) Run(run func(context1 context.Context, setIamPolicyRequest *iampb.SetIamPolicyRequest)) *MockCloudTasksServer_SetIamPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *iampb.SetIamPolicyRequest
		if args[1] != nil {
			arg1 = args[1].(*iampb.SetIamPolicyRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCloudTasksServer_SetIamPolicy_Call) Return(policy *iampb.Policy, err error) *MockCloudTasksServer_SetIamPolicy_Call {
	_c.Call.Return(policy, err)
	return _c
}

func (_c *MockCloudTasksServer_SetIamPolicy_Call) RunAndReturn(run func(context1 context.Context, setIamPolicyRequest *iampb.SetIamPolicyRequest) (*iampb.Policy, error)) *MockCloudTasksServer_SetIamPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// TestIamPermissions provides a mock function for the type MockCloudTasksServer
func (_mock *MockCloudTasksServer) TestIamPermissions(context1 context.Context, testIamPermissionsRequest *iampb.TestIamPermissionsRequest) (*iampb.TestIamPermissionsResponse, error) {
	ret := _mock.Called(context1, testIamPermissionsRequest)

	if len(ret) == 0 {
		panic("no return value specified for TestIamPermissions")
	}

	var r0 *iampb.TestIamPermissionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *iampb.TestIamPermissionsRequest) (*iampb.TestIamPermissionsResponse, error)); ok {
		return returnFunc(context1, testIamPermissionsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *iampb.TestIamPermissionsRequest) *iampb.TestIamPermissionsResponse); ok {
		r0 = returnFunc(context1, testIamPermissionsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iampb.TestIamPermissionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *iampb.TestIamPermissionsRequest) error); ok {
		r1 = returnFunc(context1, testIamPermissionsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudTasksServer_TestIamPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestIamPermissions'
type MockCloudTasksServer_TestIamPermissions_Call struct {
	*mock.Call
}

// TestIamPermissions is a helper method to define mock.On call
//   - context1 context.Context
//   - testIamPermissionsRequest *iampb.TestIamPermissionsRequest
func (_e *MockCloudTasksServer_Expecter) TestIamPermissions(context1 interface{}, testIamPermissionsRequest interface{}) *MockCloudTasksServer_TestIamPermissions_Call {
	return &MockCloudTasksServer_TestIamPermissions_Call{Call: _e.mock.On("TestIamPermissions", context1, testIamPermissionsRequest)}
}

func (_c *MockCloudTasksServer_TestIamPermissions_Call) Run(run func(context1 context.Context, testIamPermissionsRequest *iampb.TestIamPermissionsRequest)) *MockCloudTasksServer_TestIamPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *iampb.TestIamPermissionsRequest
		if args[1] != nil {
			arg1 = args[1].(*iampb.TestIamPermissionsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCloudTasksServer_TestIamPermissions_Call) Return(testIamPermissionsResponse *iampb.TestIamPermissionsResponse, err error) *MockCloudTasksServer_TestIamPermissions_Call {
	_c.Call.Return(testIamPermissionsResponse, err)
	return _c
}

func (_c *MockCloudTasksServer_TestIamPermissions_Call) RunAndReturn(run func(context1 context.Context, testIamPermissionsRequest *iampb.TestIamPermissionsRequest) (*iampb.TestIamPermissionsResponse, error)) *MockCloudTasksServer_TestIamPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateQueue provides a mock function for the type MockCloudTasksServer
func (_mock *MockCloudTasksServer) UpdateQueue(context1 context.Context, updateQueueRequest *cloudtaskspb.UpdateQueueRequest) (*cloudtaskspb.Queue, error) {
	ret := _mock.Called(context1, updateQueueRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQueue")
	}

	var r0 *cloudtaskspb.Queue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.UpdateQueueRequest) (*cloudtaskspb.Queue, error)); ok {
		return returnFunc(context1, updateQueueRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cloudtaskspb.UpdateQueueRequest) *cloudtaskspb.Queue); ok {
		r0 = returnFunc(context1, updateQueueRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudtaskspb.Queue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cloudtaskspb.UpdateQueueRequest) error); ok {
		r1 = returnFunc(context1, updateQueueRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudTasksServer_UpdateQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateQueue'
type MockCloudTasksServer_UpdateQueue_Call struct {
	*mock.Call
}

// UpdateQueue is a helper method to define mock.On call
//   - context1 context.Context
//   - updateQueueRequest *cloudtaskspb.UpdateQueueRequest
func (_e *MockCloudTasksServer_Expecter) UpdateQueue(context1 interface{}, updateQueueRequest interface{}) *MockCloudTasksServer_UpdateQueue_Call {
	return &MockCloudTasksServer_UpdateQueue_Call{Call: _e.mock.On("UpdateQueue", context1, updateQueueRequest)}
}

func (_c *MockCloudTasksServer_UpdateQueue_Call) Run(run func(context1 context.Context, updateQueueRequest *cloudtaskspb.UpdateQueueRequest)) *MockCloudTasksServer_UpdateQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *cloudtaskspb.UpdateQueueRequest
		if args[1] != nil {
			arg1 = args[1].(*cloudtaskspb.UpdateQueueRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCloudTasksServer_UpdateQueue_Call) Return(queue *cloudtaskspb.Queue, err error) *MockCloudTasksServer_UpdateQueue_Call {
	_c.Call.Return(queue, err)
	return _c
}

func (_c *MockCloudTasksServer_UpdateQueue_Call) RunAndReturn(run func(context1 context.Context, updateQueueRequest *cloudtaskspb.UpdateQueueRequest) (*cloudtaskspb.Queue, error)) *MockCloudTasksServer_UpdateQueue_Call {
	_c.Call.Return(run)
	return _c
}
